/**
 * Generated by orval v7.1.1 🍺
 * Do not edit manually.
 * Interview API
 * Documentation for interview endpoints
 * OpenAPI spec version: 1.0.0
 */
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import { useMutation, useQuery } from '@tanstack/react-query';

import type { ErrorType } from './apiClient';
import { customInstance } from './apiClient';
import type {
  AuthResponseDto,
  GetApiProducts200Item,
  GetApiSalesRevenue200Item,
  LoginRequestDto,
  TodaysStatsResponse,
  UserDto,
} from './models';

/**
 * @summary Get User Profile
 */
export const getUserProfile = (signal?: AbortSignal) => {
  return customInstance<UserDto>({ url: `/api/user`, method: 'GET', signal });
};

export const getGetUserProfileQueryKey = () => {
  return [`/api/user`] as const;
};

export const getGetUserProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserProfile>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserProfileQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserProfile>>> = ({
    signal,
  }) => getUserProfile(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserProfile>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUserProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserProfile>>
>;
export type GetUserProfileQueryError = ErrorType<unknown>;

export function useGetUserProfile<
  TData = Awaited<ReturnType<typeof getUserProfile>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getUserProfile>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetUserProfile<
  TData = Awaited<ReturnType<typeof getUserProfile>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getUserProfile>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetUserProfile<
  TData = Awaited<ReturnType<typeof getUserProfile>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get User Profile
 */

export function useGetUserProfile<
  TData = Awaited<ReturnType<typeof getUserProfile>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUserProfileQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary User login
 */
export const postApiAuthLogin = (loginRequestDto: LoginRequestDto) => {
  return customInstance<AuthResponseDto>({
    url: `/api/auth/login`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: loginRequestDto,
  });
};

export const getPostApiAuthLoginMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthLogin>>,
    TError,
    { data: LoginRequestDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiAuthLogin>>,
  TError,
  { data: LoginRequestDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAuthLogin>>,
    { data: LoginRequestDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAuthLogin(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAuthLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthLogin>>
>;
export type PostApiAuthLoginMutationBody = LoginRequestDto;
export type PostApiAuthLoginMutationError = ErrorType<void>;

/**
 * @summary User login
 */
export const usePostApiAuthLogin = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiAuthLogin>>,
    TError,
    { data: LoginRequestDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiAuthLogin>>,
  TError,
  { data: LoginRequestDto },
  TContext
> => {
  const mutationOptions = getPostApiAuthLoginMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Get today's stats
 */
export const getApiStatsTodaysStats = (signal?: AbortSignal) => {
  return customInstance<TodaysStatsResponse>({
    url: `/api/stats/todays-stats`,
    method: 'GET',
    signal,
  });
};

export const getGetApiStatsTodaysStatsQueryKey = () => {
  return [`/api/stats/todays-stats`] as const;
};

export const getGetApiStatsTodaysStatsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiStatsTodaysStats>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiStatsTodaysStats>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiStatsTodaysStatsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiStatsTodaysStats>>
  > = ({ signal }) => getApiStatsTodaysStats(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiStatsTodaysStats>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiStatsTodaysStatsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiStatsTodaysStats>>
>;
export type GetApiStatsTodaysStatsQueryError = ErrorType<void>;

export function useGetApiStatsTodaysStats<
  TData = Awaited<ReturnType<typeof getApiStatsTodaysStats>>,
  TError = ErrorType<void>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiStatsTodaysStats>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiStatsTodaysStats>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiStatsTodaysStats<
  TData = Awaited<ReturnType<typeof getApiStatsTodaysStats>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiStatsTodaysStats>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiStatsTodaysStats>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiStatsTodaysStats<
  TData = Awaited<ReturnType<typeof getApiStatsTodaysStats>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiStatsTodaysStats>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get today's stats
 */

export function useGetApiStatsTodaysStats<
  TData = Awaited<ReturnType<typeof getApiStatsTodaysStats>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiStatsTodaysStats>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiStatsTodaysStatsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get top sales products
 */
export const getApiProducts = (signal?: AbortSignal) => {
  return customInstance<GetApiProducts200Item[]>({
    url: `/api/products`,
    method: 'GET',
    signal,
  });
};

export const getGetApiProductsQueryKey = () => {
  return [`/api/products`] as const;
};

export const getGetApiProductsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiProducts>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiProductsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProducts>>> = ({
    signal,
  }) => getApiProducts(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiProducts>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiProductsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiProducts>>
>;
export type GetApiProductsQueryError = ErrorType<void>;

export function useGetApiProducts<
  TData = Awaited<ReturnType<typeof getApiProducts>>,
  TError = ErrorType<void>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiProducts>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiProducts<
  TData = Awaited<ReturnType<typeof getApiProducts>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiProducts>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiProducts<
  TData = Awaited<ReturnType<typeof getApiProducts>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get top sales products
 */

export function useGetApiProducts<
  TData = Awaited<ReturnType<typeof getApiProducts>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiProductsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get sales revenue data
 */
export const getApiSalesRevenue = (signal?: AbortSignal) => {
  return customInstance<GetApiSalesRevenue200Item[]>({
    url: `/api/sales/revenue`,
    method: 'GET',
    signal,
  });
};

export const getGetApiSalesRevenueQueryKey = () => {
  return [`/api/sales/revenue`] as const;
};

export const getGetApiSalesRevenueQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiSalesRevenue>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiSalesRevenue>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiSalesRevenueQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiSalesRevenue>>
  > = ({ signal }) => getApiSalesRevenue(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiSalesRevenue>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiSalesRevenueQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiSalesRevenue>>
>;
export type GetApiSalesRevenueQueryError = ErrorType<void>;

export function useGetApiSalesRevenue<
  TData = Awaited<ReturnType<typeof getApiSalesRevenue>>,
  TError = ErrorType<void>,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiSalesRevenue>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiSalesRevenue>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiSalesRevenue<
  TData = Awaited<ReturnType<typeof getApiSalesRevenue>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiSalesRevenue>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiSalesRevenue>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiSalesRevenue<
  TData = Awaited<ReturnType<typeof getApiSalesRevenue>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiSalesRevenue>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get sales revenue data
 */

export function useGetApiSalesRevenue<
  TData = Awaited<ReturnType<typeof getApiSalesRevenue>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiSalesRevenue>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiSalesRevenueQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
